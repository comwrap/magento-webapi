diff --git a/WebApi/CustomAttributeTypeLocator.php b/WebApi/CustomAttributeTypeLocator.php
new file mode 100644
index 0000000..14e3fc7
--- /dev/null
+++ b/WebApi/CustomAttributeTypeLocator.php
@@ -0,0 +1,56 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Framework\Webapi;
+
+use Magento\Framework\Reflection\TypeProcessor;
+//use Magento\Framework\Webapi\CustomAttribute\ServiceTypeListInterface;
+use Magento\Framework\Webapi\CustomAttributeTypeLocatorInterface;
+/**
+ * Class to locate types for Eav custom attributes
+ */
+class CustomAttributeTypeLocator implements CustomAttributeTypeLocatorInterface
+{
+    /**
+     * @var \Magento\Framework\Webapi\CustomAttributeTypeLocatorInterface[]
+     */
+    private $typeLocators;
+    /**
+     * @var ServiceTypeListInterface
+     */
+//    private $serviceTypeList;
+    /**
+     * Initialize TypeLocator
+     *
+     * @param \Magento\Framework\Webapi\CustomAttributeTypeLocatorInterface[] $typeLocators
+     */
+    public function __construct(
+//        ServiceTypeListInterface $serviceTypeList,
+        array $typeLocators = []
+    ) {
+        $this->typeLocators = $typeLocators;
+//        $this->serviceTypeList = $serviceTypeList;
+    }
+    /**
+     * {@inheritdoc}
+     */
+    public function getType($attributeCode, $entityType)
+    {
+        foreach ($this->typeLocators as $typeLocator) {
+            $type = $typeLocator->getType($attributeCode, $entityType);
+            if ($type !== TypeProcessor::NORMALIZED_ANY_TYPE) {
+                return $type;
+            }
+        }
+        return TypeProcessor::NORMALIZED_ANY_TYPE;
+    }
+    /**
+     * {@inheritDoc}
+     */
+    public function getAllServiceDataInterfaces()
+    {
+        return $this->serviceTypeList->getDataTypes();
+    }
+}
\ No newline at end of file
diff --git a/WebApi/CustomAttributeTypeLocatorInterface.php b/WebApi/CustomAttributeTypeLocatorInterface.php
index ac183bc..e208c5b 100644
--- a/WebApi/CustomAttributeTypeLocatorInterface.php
+++ b/WebApi/CustomAttributeTypeLocatorInterface.php
@@ -25,7 +25,6 @@ interface CustomAttributeTypeLocatorInterface
      *
      * @return string[] array of Data Interface class names
      * @deprecated 102.0.0
-     * @see \Magento\Framework\Webapi\CustomAttribute\ServiceTypeListInterface::getDataTypes()
      */
     public function getAllServiceDataInterfaces();
 }
diff --git a/WebApi/ServiceTypeToEntityTypeMap.php b/WebApi/ServiceTypeToEntityTypeMap.php
index b126dc6..00e37d9 100644
--- a/WebApi/ServiceTypeToEntityTypeMap.php
+++ b/WebApi/ServiceTypeToEntityTypeMap.php
@@ -19,7 +19,7 @@ class ServiceTypeToEntityTypeMap
     /**
      * @param $serviceTypeToEntityTypeMap
      */
-    public function __construct($serviceTypeToEntityTypeMap)
+    public function __construct($serviceTypeToEntityTypeMap = [])
     {
         $this->serviceTypeToEntityTypeMap = $serviceTypeToEntityTypeMap;
     }

diff --git a/Mail/Template/SenderResolver.php b/Mail/Template/SenderResolver.php
new file mode 100644
index 0000000..e8e328e
--- /dev/null
+++ b/Mail/Template/SenderResolver.php
@@ -0,0 +1,53 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Framework\Mail\Template;
+
+class SenderResolver implements \Magento\Framework\Mail\Template\SenderResolverInterface
+{
+    /**
+     * Core store config
+     *
+     * @var \Magento\Framework\App\Config\ScopeConfigInterface
+     */
+    protected $_scopeConfig;
+
+    /**
+     * @param \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig
+     */
+    public function __construct(\Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig)
+    {
+        $this->_scopeConfig = $scopeConfig;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function resolve($sender, $scopeId = null)
+    {
+        $result = [];
+
+        if (!is_array($sender)) {
+            $result['name'] = $this->_scopeConfig->getValue(
+                'trans_email/ident_' . $sender . '/name',
+                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+                $scopeId
+            );
+            $result['email'] = $this->_scopeConfig->getValue(
+                'trans_email/ident_' . $sender . '/email',
+                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
+                $scopeId
+            );
+        } else {
+            $result = $sender;
+        }
+
+        if (!isset($result['name']) || !isset($result['email'])) {
+            throw new \Magento\Framework\Exception\MailException(__('Invalid sender data'));
+        }
+
+        return $result;
+    }
+}
diff --git a/Mail/Template/TransportBuilder.php b/Mail/Template/TransportBuilder.php
index d7abb84..4a367e3 100644
--- a/Mail/Template/TransportBuilder.php
+++ b/Mail/Template/TransportBuilder.php
@@ -10,7 +10,7 @@ namespace Magento\Framework\Mail\Template;

 use Magento\Framework\App\TemplateTypesInterface;
 use Magento\Framework\Exception\LocalizedException;
-use Magento\Framework\Mail\MessageInterface;
+use Magento\Framework\Mail\Message;
 use Magento\Framework\Mail\MessageInterfaceFactory;
 use Magento\Framework\Mail\TransportInterfaceFactory;
 use Magento\Framework\ObjectManagerInterface;
@@ -109,19 +109,18 @@ class TransportBuilder
      * @SuppressWarnings(PHPMD.UnusedFormalParameter)
      */
     public function __construct(
-        FactoryInterface $templateFactory,
-        MessageInterface $message,
-        SenderResolverInterface $senderResolver,
+        Factory $templateFactory,
+        Message $message,
+        SenderResolver $senderResolver,
         ObjectManagerInterface $objectManager,
-        TransportInterfaceFactory $mailTransportFactory,
-        MessageInterfaceFactory $messageFactory = null
+        TransportInterfaceFactory $mailTransportFactory
     ) {
         $this->templateFactory = $templateFactory;
         $this->objectManager = $objectManager;
         $this->_senderResolver = $senderResolver;
         $this->mailTransportFactory = $mailTransportFactory;
-        $this->messageFactory = $messageFactory ?: $this->objectManager->get(MessageInterfaceFactory::class);
-        $this->message = $this->messageFactory->create();
+        $this->messageFactory = $message;
+        $this->message = $message;
     }